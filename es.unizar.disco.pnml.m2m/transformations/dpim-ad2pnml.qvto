import es.unizar.disco.pnml.utils.PnmlDiceUtils;

import helpers;

modeltype UML uses 'http://www.eclipse.org/uml2/5.0.0/UML';
modeltype PNML uses 'http:///ptnet.ecore';
modeltype TYPES uses 'http://es.unizar.disco/simulation/datatypes/1.0';
modeltype TRACE uses 'http://es.unizar.disco/simulation/traces/1.0';
modeltype CONST uses 'http://es.unizar.disco/pnconstants/1.0';
modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
	

transformation ad2pnml(in ad : UML, in vars : TYPES, out res : PNML, out traces : TRACE); 

/**
	Main method:
		1.- Create the root elements (PetriNetDoc, PetriNet, Page)
		2.- Transform ActivityNodes, creating subnets of places and transitions
		2.- Transform ControlFlows, linking the previously created subnets
		2.- Complete transformation with the information of the workload in the initial nodes
*/
main() {
	// Transform top-level elements
	ad.scenario().map model2doc();
	
	// Transform net contents
	ad.scenario().node[UML::ActivityNode] -> map activityNode2subNet();
	ad.scenario().edge[UML::ControlFlow] -> map controlFlow2arc();
	
	// Transform deployment
	ad->objectsOfType(ActivityPartition)->flatten()[ActivityPartition] -> map partitions2resources();
	
	// Transform workload descriptions
	var initialNodes := ad.scenario().node[UML::InitialNode];
	assert fatal (initialNodes->size() = 1) with log ("Only Activities with a single Initial Node are supported");
	initialNodes[getGaWorkloadEvent().oclIsUndefined().not()] -> map initialNodes2AnalysisType();
	
	// Set time metadata
	if (resolveoneIn(UML::NamedElement::model2net, PNML::PetriNet).toolspecifics->notEmpty()) {
		log("Base time unit is 's'");
		log("Base frequency unit is 'Hz'");
	} else {
		log("Base time unit is 'tick'");
		log("Base frequency unit is 'events per tick'");
	}
}

/**
	Create the PetriNetDoc and the PetriNet
*/
mapping UML::NamedElement::model2doc() : PNML::PetriNetDoc {
	nets := self.map model2net();
}

mapping UML::NamedElement::model2net() : PNML::PetriNet {
	id := createRandomUniqueId();
	name := object PNML::Name {
		text := self.name;
	};
	pages := self.map model2page();
}

/**
	Create the page
*/
mapping UML::NamedElement::model2page() : PNML::Page {
	id := createRandomUniqueId();
}

/**
	Sets the metadata for the base time unit on the PNML file
*/
mapping baseTimeUnit(unit : String) {
	var net := resolveoneIn(UML::NamedElement::model2net, PNML::PetriNet);
	net.toolspecifics += baseTimeUnitToolInfo(unit);
}

/**
	Get the initial node's information to call the proper transformation
	rule according to the kind of workload
*/
mapping UML::InitialNode::initialNodes2AnalysisType() {
	var pattern := self.getGaWorkloadEvent_pattern();
	switch {
		case (pattern.oclIsUndefined())
			assert warning (false) with log ("Unparseable workload pattern");
	 	case (pattern.oclIsTypeOf(ClosedPattern)) 
			self.map model2closedNet();
		case (pattern.oclIsTypeOf(OpenPattern)) 
			self.map model2openNet();
		else {
			assert warning (false) with log ("Unknown workload pattern: " + pattern._rawExpression);
		};
	}	
}

/**
	Transform the model to a closed net using the initial node
*/
mapping UML::InitialNode::model2closedNet() {
	var pattern := self.getGaWorkloadEvent_pattern().oclAsType(ClosedPattern);
	var place := self.resolveoneIn(UML::ActivityNode::activityNode2place);
	var closingTransitions := ad.scenario().node[UML::ActivityFinalNode].resolveIn(UML::ActivityNode::activityNode2transition);
	assert warning (closingTransitions->size() = 1) with log ("More than one closing transition found, this can be problematic to compute the throughput of the system");
	closingTransitions->forEach(transition) {
		map arc(transition, place);
		// Add tracing information
		ad.scenario().map trace(transition, "model2closedNet");
	};
	assert fatal (pattern.population_.value() <= 32767) with log ("Population must be an integer value under 32767, error in expression '" + pattern._rawExpression + "'");
	place.initialMarking := object PNML::PTMarking {
		text := pattern.population_.value();
	};
	// The extDelay is set in the time of the transition just next to the InitialNodePlace
	var transition := self.resolveoneIn(UML::ActivityNode::activityNode2transition);
	transition.toolspecifics += expTransitionToolInfo(1 / pattern.extDelay.value());
	transition.toolspecifics += infServerTransitionToolInfo();
}

/**
	Transform the model to an open net using the initial node
*/
mapping UML::InitialNode::model2openNet() {
	var pattern := self.getGaWorkloadEvent_pattern().oclAsType(OpenPattern);
	var transition := self.resolveoneIn(UML::ActivityNode::activityNode2transition);
	// Set the rate of the previously generated transition
	// This transition will generate the workload directly
	assert fatal (pattern.arrivalRate.oclIsUndefined() xor pattern.interArrivalTime.oclIsUndefined()) 
		with log ("Only one 'arrivalRate' xor 'interArrivalTime' should be defined");
	if (pattern.arrivalRate.oclIsUndefined().not()) {
		transition.toolspecifics += expTransitionToolInfo(pattern.arrivalRate.value());
		transition.toolspecifics += oneServerTransitionToolInfo();
	} else if (pattern.interArrivalTime.oclIsUndefined().not()) {
		transition.toolspecifics += expTransitionToolInfo(1 / pattern.interArrivalTime.value());
		transition.toolspecifics += oneServerTransitionToolInfo();
	};
	
	var finalTransitions := ad.scenario().node[UML::ActivityFinalNode].resolveIn(UML::ActivityNode::activityNode2transition);
	assert warning (finalTransitions->size() = 1) with log ("More than one final transition found, this can be problematic to compute the throughput of the system");
	finalTransitions->forEach(finalTransition) {
		// Add tracing information
		ad.scenario().map trace(finalTransition, "model2openNet");
	};
	
}

mapping UML::ActivityPartition::partitions2resources() 
when {
	self.represents.getPaLogicalResource_poolSize().oclIsUndefined().not();
}{
	var poolSize := self.represents.getPaLogicalResource_poolSize();
	
	var partitions := self->closure(subpartition)->including(self);
	
	var containedNodes := ad.objectsOfKind(UML::ActivityNode)->select(node : ActivityNode | partitions->intersection(node.inPartition)->notEmpty());
	
	var incomingEdges := ad.objectsOfKind(UML::ActivityEdge)
							->select(edge : ActivityEdge | containedNodes->includes(edge.source).not())
							->select(edge : ActivityEdge | containedNodes->includes(edge.target));
	var outgoingEdges := ad.objectsOfKind(UML::ActivityEdge)
							->select(edge : ActivityEdge | containedNodes->includes(edge.source))
							->select(edge : ActivityEdge | containedNodes->includes(edge.target).not());

	var place := self.map namedElement2place();
	place.initialMarking := object PNML::PTMarking {
		text := poolSize.value();
	};
	
	// For each edge that enters the Activity Partition, we need to modify 
	// the subnet that was previously generated by adding an intermediate place 
	// and an intemediate immediate transition that receives the tokent from the
	// resource's place, i.e.
	// [T]-->[P]
	// is transformed into:
	// [T]-->[P']-->[T']-->[P]
	//               ^
	//               |
	//       [Resources-Place]
	 
	incomingEdges->forEach(edge) {
		// Get the original transition
		var originalSourceTrans := edge.source.resolveoneIn(UML::NamedElement::namedElement2transition);
		// Ensure that we have a transition with a single outgoing arc
		assert fatal (originalSourceTrans.oclIsUndefined().not()) with log ("Could not find a source transition while transforming edge '" + edge.toString() + "' in partition '" + self.toString() + "'");
		assert fatal (originalSourceTrans.OutArcs->size() = 1) with log ("Unexpected number of outgoing arcs in transition '" + originalSourceTrans.toString() + "'");
		
		// Create the intermediate nodes
		var intermediatePlace := object PNML::Place {
			containerPage := resolveoneIn(UML::NamedElement::model2page);
			id := createRandomUniqueId();
		};
		var intermediateTrans := object PNML::Transition {
			containerPage := resolveoneIn(UML::NamedElement::model2page);
			id := createRandomUniqueId();
		};
		
		
		var arc := originalSourceTrans.OutArcs->asSequence()->first();
		var originalTargetPlace := arc.target;
		
		// Relink the original arc
		arc.target := intermediatePlace;
		// Add the intermediate nodes
		map arc(intermediatePlace, intermediateTrans);
		map arc(intermediateTrans, originalTargetPlace);
		// Attach the resource's place 
		map arc(place, intermediateTrans);
	};
	
		
	// For each edge that leaves the Activity Partition, we need to add an arc to the 
	// resource's place
	outgoingEdges->forEach(edge) {
		// Get the original transition
		var originalSourceTrans := edge.source.resolveoneIn(UML::NamedElement::namedElement2transition);
		// Ensure that we have a transition 
		assert fatal (originalSourceTrans.oclIsUndefined().not()) with log ("Could not find a source transition while transforming edge '" + edge.toString() + "' in partition '" + self.toString() + "'");
		// Add an arc from the transition to the resource's place
		map arc(originalSourceTrans, place);
	};
	
	// Add tracing information
	self.represents.map trace(place, "partitions2resources");
}

mapping UML::ActivityNode::activityNode2subNet() disjuncts 
UML::InitialNode::initialNode2subNet,
UML::DecisionNode::decisionActivityNode2subNet,
UML::JoinNode::joinActivityNode2subNet,
UML::ActivityNode::basicActivityNode2subNet {};

/**
	Transform a generic ActivityNodel into a simple [place]->[transition] subnet
*/
mapping UML::ActivityNode::basicActivityNode2subNet() {
	var place := self.map activityNode2place();
	var transition := self.map activityNode2transition();
	var arc := map arc(place, transition);
	// Add tracing information
	self.map trace(place, "basicActivityNode2place");
	self.map trace(transition, "basicActivityNode2transition");
}

/**
	Transforms an InitialNode into a pair of [place]-->[transition] if the workload pattern
	is undefined or closed, and only a single [transition] if the workload pattern is open
*/
mapping UML::InitialNode::initialNode2subNet() {
	var transition := self.map activityNode2transition();
	if (self.getGaWorkloadEvent_pattern().oclIsTypeOf(OpenPattern).not()) {
		var place := self.map activityNode2place();
		var arc := map arc(place, transition);
	};
}

/**
	Transform a generic Decision ActivityNode into a single [place].
	Transitions will be handled in the transformation of the ControlFlows
*/
mapping UML::DecisionNode::decisionActivityNode2subNet() {
	var place := self.map activityNode2place();
}

/**
	Transform a generic Join ActivityNode into a single [transition].
	Places will be handled in the transformation of the ControlFlows
*/
mapping UML::JoinNode::joinActivityNode2subNet() {
	var transition := self.map activityNode2transition();
}


/**
	Transform a generic NamedElement into a Place 
*/
mapping UML::NamedElement::namedElement2place() : PNML::Place {
	containerPage := resolveoneIn(UML::NamedElement::model2page);
	id := createRandomUniqueId();
	if (self.name.oclIsUndefined().not()) {
		name := object PNML::Name {
			text := self.name;
		};
	};
}

/**
	Transform a generic ActivityNode into a Place 
*/
mapping UML::ActivityNode::activityNode2place() : PNML::Place 
inherits UML::NamedElement::namedElement2place {
}

/**
	Transform a generic NamedElement into a Transition 
*/
mapping UML::NamedElement::namedElement2transition() : PNML::Transition {
	containerPage := resolveoneIn(UML::NamedElement::model2page);
	id := createRandomUniqueId();
	if (self.name.oclIsUndefined().not()) {
		name := object PNML::Name {
			text := self.name;
		};
	};
}

/**
	Transform a generic ActivityNode into a Transition and 
	creates any additional ToolInfo depending on the ActivityNode
	subtype (e.g., OpaqueActions with hostDemand may create 
	exponential transitions) 
*/
mapping UML::ActivityNode::activityNode2transition() : PNML::Transition 
inherits UML::NamedElement::namedElement2transition {
	toolspecifics += self[OpaqueAction].map opaqueActionHostDemand2toolInfo();
}

/**
	Transformas an OpaqueAction with a hostDemand annotation to a ToolInfo element
*/
mapping UML::OpaqueAction::opaqueActionHostDemand2toolInfo() : List ( PNML::ToolInfo ) 
when {
		self.getGaStep_hostDemand().oclIsUndefined().not();
}{
	var hostDemand := self.getGaStep_hostDemand();
	result += expTransitionToolInfo( 1 / hostDemand.value());
	result += infServerTransitionToolInfo();
}

/**
	Creates an Arc from 'src' to 'tgt'
*/
mapping arc(in src : PNML::Node, in tgt : PNML::Node) : PNML::Arc {
	containerPage := resolveoneIn(UML::NamedElement::model2page);
	id := createRandomUniqueId();
	source := src;
	target := tgt;
}

/**
	Transforms a ControlFlow between two ActivityNodes to different subnets,
	being the most simple an arc between the subnets corresponding to the
	ActivityNodes contected by the ControlFlow 
*/
mapping UML::ControlFlow::controlFlow2arc() disjuncts 
UML::ControlFlow::decisionControlFlow2arc,
UML::ControlFlow::joinControlFlow2arc,
UML::ControlFlow::basicControlFlow2arc {};

/**
	Transforms a ControlFlow between two ActivityNodes to an Arc between a 
	transition and a place in the form:
	UML:
		[AN1] --> [AN2]
	PN:
		( [PlaceAN1]-- ... -->[TransAN1] )--->( [PlaceAN2]-- ... -->[TransAN2] )
		 --------------------------------      --------------------------------
		            Subnet AN1                            Subnet AN2
*/
mapping UML::ControlFlow::basicControlFlow2arc() {
	assert warning (self.getGaStep_prob().oclIsUndefined())
		with log ("Only ControlFlows departing from a DecisionNode should define a probability. " +
					"Ignoring annotation in the context element '" + self.toString() + "'"); 
	var transition := self.source.resolveoneIn(UML::ActivityNode::activityNode2transition);
	var place := self.target.resolveoneIn(UML::ActivityNode::activityNode2place);
	map arc(transition, place);
}

/**
	Transforms a ControlFlow between a DecissionNode and a generic ActivityNode.
	The DecissionNode has been previously transformed as a single place, and now
	we need to create a probabilistic immediate transition for each departing ControlFlow
*/
mapping UML::ControlFlow::decisionControlFlow2arc() when {
	self.source.oclIsKindOf(DecisionNode)
}{
	var decisionPlace := self.source.resolveoneIn(UML::ActivityNode::activityNode2place);
	var nextNodePlace := self.target.resolveoneIn(UML::ActivityNode::activityNode2place);
	var transition := self.map namedElement2transition();
	transition.toolspecifics += self.map probabilisticControlFlow2toolInfo();
	
	map arc(decisionPlace, transition);
	map arc(transition, nextNodePlace);
}

/**
	Transforms a ControlFlow between a generic ActivityNode and a Join.
	The Join has been previously transformed as a single transition, and now
	we need to create a Place for each incoming ControlFlow to enable the
	synchronization of the different execution flows
*/
mapping UML::ControlFlow::joinControlFlow2arc() when {
	self.target.oclIsKindOf(JoinNode)
}{
	var prevNodeTrans := self.source.resolveoneIn(UML::ActivityNode::activityNode2transition);
	var joinTrans := self.target.resolveoneIn(UML::ActivityNode::activityNode2transition);
	var place := self.map namedElement2place();
	
	if (place.name.oclIsUndefined() and self.target.name.oclIsUndefined().not()) {
		place.name := object PNML::Name {
			text := self.target.name.addSuffixNumber();
		};
	};
	
	map arc(prevNodeTrans, place);
	map arc(place, joinTrans);
}

/**
	Transformas ControlFlow with a prob annotation to a ToolInfo element
*/
mapping UML::ControlFlow::probabilisticControlFlow2toolInfo() : PNML::ToolInfo 
when {
		self.getGaStep_prob().oclIsUndefined().not();
}{
	init {
		result := probTransitionToolInfo(self.getGaStep_prob().value());
	}
}


/*******************************************************************************
  Traceability mappings
*******************************************************************************/

mapping OclAny::trace(to : OclAny) : TRACE::Trace {
	init {
		result := object TRACE::Trace {
			fromDomainElement := self.eObject();
			toAnalyzableElement := to.eObject();
		}
	}
}

mapping OclAny::trace(to : OclAny, text : String) : TRACE::Trace {
	init {
		result := object TRACE::Trace {
			fromDomainElement := self.eObject();
			toAnalyzableElement := to.eObject();
			rule := text;
		}
	}
}

/*******************************************************************************
  Navigation helpers
  Helpers on domains are only valid in the context of a transformations and
  cannot be moved to a library
*******************************************************************************/

helper UML::scenario() : UML::Activity {
	// When running the transformation from the simulation tool, the UML domain must 
	// contain a single activity at its root 
	assert warning (self.rootObjects()[UML::Activity]->size() = 1) with log ("No single Activity instance was found at the root of the UML input model, trying to use the first Activity in the model instead");
	
	if (self.rootObjects()[UML::Activity]->isEmpty().not()) {
		return self.rootObjects()[UML::Activity]->asOrderedSet()->first();
	};
	// This execution path is useful when running the transformation at development time
	return self.objectsOfType(UML::Activity)->asOrderedSet()->first();
}

helper TYPES::vars() : Set ( PrimitiveVariableAssignment ) {
	return self.rootObjects()[PrimitiveVariableAssignment];
}

helper TYPES::PrimitiveVariableAssignment::asDict() : Dict(String, Real) {
	var vars : Dict (String, Real) := Dict {};
	self->forEach(assignment) {
		vars->put(assignment.variable, assignment.value.toString().toReal());
	};
	return vars;
}

helper TRACE::set() : TRACE::TraceSet {
	return self.rootObjects()[TRACE::TraceSet]->asSequence()->first();
}

/*******************************************************************************
  Intermediate classes
  Sadly, intermediate classes cannot be shared among libraries or 
  transformations.
*******************************************************************************/
   
intermediate class ArrivalPattern {
	_rawExpression : String;
}

intermediate class ClosedPattern extends ArrivalPattern {
	population_ : NFP_Integer;
	extDelay : NFP_Real;
}

intermediate class OpenPattern extends ArrivalPattern {
	interArrivalTime : NFP_Duration;
	arrivalRate : NFP_Frequency;
	arrivalProcess : String;
}

intermediate class NFP_CommonType {
	_rawExpression : String;
	expr : String;
	source : String;
	statQ : String;
	dir : String;
	mode : String;
}

intermediate class NFP_Integer extends NFP_CommonType {
	value : Integer;
}

intermediate class NFP_Real extends NFP_CommonType{
	value : Real;
}

intermediate class NFP_Duration extends NFP_Real {
	unit : String;
	clock : String;
	precision : Real;
	worst : Real;
	best : Real;
}

intermediate class NFP_Frequency extends NFP_Real {
	unit : String;
	precision : Real;
}

/*******************************************************************************
  Tagged values utilities
*******************************************************************************/

/**
	Helper that parses a VSL tuple containing a NFP_CommonType
*/
helper String::toNfpCommonType() : NFP_CommonType {
	var res := object NFP_CommonType {
		_rawExpression := self;
		statQ := null;
		expr := null;
		source := null;
		dir := null;
		mode := null;
	};
	if (self.isTuple()) {
		var entries := self.asTuple();
		res.expr := entries->get("expr");
		res.statQ := entries->get("statQ");
		res.source := entries->get("source");
		res.dir := entries->get("dir");
		res.mode := entries->get("mode");
	} else {
		res.expr := self;
	};
	assert warning (res.statQ.oclIsUndefined() or res.statQ = 'mean') 
		with log ("Expression '" + self + "' defines an unknown 'statQ' value, expected empty or 'mean'");
	assert warning (res.source.oclIsUndefined() or res.source = 'est' or res.source = 'meas')
		with log ("Expression '" + self + "' defines an unsupported 'source' for an input parameter, expected 'est' or 'meas'.");
	assert warning (res.dir.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'dir' property");
	assert warning (res.mode.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'mode' property");
	return res;
}

/**
	Helper that parses a VSL tuple containing a NFP_Integer
*/
helper String::toNfpInteger() : NFP_Integer {
	var nfp := self.toNfpCommonType();
	var res := object NFP_Integer {
		_rawExpression := nfp._rawExpression;
		expr := nfp.expr;
		statQ := nfp.statQ;
		source := nfp.source;
		dir := nfp.dir;
		mode := nfp.mode;
		value := null;
	};
	if (self.isTuple()) {
		var entries := self.asTuple();
		res.value := entries->get("value").toInteger();
	};
	assert fatal (res.value.oclIsUndefined() xor res.expr.oclIsUndefined())
		with log ("Expression '" + self + "' must define either a valid 'value' or a valid 'expr'");
	return res;
}

/**
	Helper that parses a VSL tuple containing a NFP_Real
*/
helper String::toNfpReal() : NFP_Real {
	var nfp := self.toNfpCommonType();
	var res := object NFP_Real {
		_rawExpression := nfp._rawExpression;
		expr := nfp.expr;
		statQ := nfp.statQ;
		source := nfp.source;
		dir := nfp.dir;
		mode := nfp.mode;
		value := null;
	};
	if (self.isTuple()) {
		var entries := self.asTuple();
		res.value := entries->get("value").toReal();
	};
	assert fatal (res.value.oclIsUndefined() xor res.expr.oclIsUndefined())
		with log ("Expression '" + self + "' must define either a valid 'value' or a valid 'expr'");
	return res;
}


/**
	Helper that parses a VSL tuple containing a NFP_Duration
*/
helper String::toNfpDuration() : NFP_Duration {
	var nfp := self.toNfpReal();
	var res := object NFP_Duration {
		_rawExpression := nfp._rawExpression;
		value := nfp.value;
		expr := nfp.expr;
		statQ := nfp.statQ;
		source := nfp.source;
		dir := nfp.dir;
		mode := nfp.mode;
		unit := null;
		clock := null;
		precision := null;
		worst := null;
		best := null;
	};
	if (self.isTuple()) {
		var entries := self.asTuple();
		res.unit := entries->get("unit");
		res.clock := entries->get("clock");
		res.precision := entries->get("precision").toReal();
		res.worst := entries->get("worst").toReal();
		res.best := entries->get("best").toReal();
	};
	assert warning (res.unit.oclIsUndefined().not())
		with log ("Expression '" + self + "' does not define a 'unit', assumming the default base unit (see complete log)");
	assert warning (res.dir.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'clock' property");
	assert warning (res.dir.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'precision' property");
	assert warning (res.dir.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'worst' property");
	assert warning (res.dir.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'best' property");
	
	return res;
}

/**
	Helper that parses a VSL tuple containing a NFP_Frequency
*/
helper String::toNfpFrequency() : NFP_Frequency {
	var nfp := self.toNfpReal();
	var res := object NFP_Frequency {
		_rawExpression := nfp._rawExpression;
		value := nfp.value;
		expr := nfp.expr;
		statQ := nfp.statQ;
		source := nfp.source;
		dir := nfp.dir;
		mode := nfp.mode;
		unit := null;
		precision := null;
	};
	if (self.isTuple()) {
		var entries := self.asTuple();
		res.unit := entries->get("unit");
		res.precision := entries->get("precision").toReal();
	};
	assert warning (res.unit.oclIsUndefined().not())
		with log ("Expression '" + self + "' does not define a 'unit', assumming the default base unit (see complete log)");
	assert warning (res.dir.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'clock' property");
	assert warning (res.dir.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'precision' property");
	assert warning (res.dir.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'worst' property");
	assert warning (res.dir.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'best' property");
	
	return res;
}

helper NFP_Integer::value() : Integer {
	if (self.value.oclIsUndefined().not()) {
		return self.value;
	};
	return self.expr.eval(vars.vars()).toInteger();
}

helper NFP_Real::value() : Real {
	if (self.value.oclIsUndefined().not()) {
		return self.value;
	};
	return self.expr.eval(vars.vars()).toReal();
}

helper NFP_Duration::value() : Real {
	var value : Real;	
	if (self.value.oclIsUndefined().not()) {
		value := self.value;
	};
	value := self.expr.eval(vars.vars()).toReal();
	if (self.unit.oclIsUndefined().not()) {
		map baseTimeUnit("s");			
		value := value.convert(self.unit, "s");
	};
	return value;
}

helper NFP_Frequency::value() : Real {
	var value : Real;	
	if (self.value.oclIsUndefined().not()) {
		value := self.value;
	};
	value := self.expr.eval(vars.vars()).toReal();
	if (self.unit.oclIsUndefined().not()) {
		map baseTimeUnit("s");
		value := value.convert(self.unit, "Hz");
	};
	return value;
}

/*******************************************************************************
  Getters for tagged values
******************************************************************************/

helper UML::Element::getGaWorkloadEvent_pattern() : ArrivalPattern {
	if (self.getGaWorkloadEvent() = null) {
		return null;
	};
	var patternString := self.getValue(self.getGaWorkloadEvent(), "pattern").oclAsType(String);
	var patternName := patternString.key();
	var patternValue := patternString.value();
	switch {
		case (patternName = "closed") {
			return object ClosedPattern {
				_rawExpression := patternValue;
				population_ := patternValue.asTuple()->get("population").toNfpInteger();
				extDelay := patternValue.asTuple()->get("extDelay").toNfpDuration();
			};
		} case (patternString.key() = "open") {
			return object OpenPattern {
				_rawExpression := patternValue;
				interArrivalTime := patternValue.asTuple()->get("interArrivalTime").toNfpDuration();
				arrivalRate := patternValue.asTuple()->get("arrivalRate").toNfpFrequency();
				arrivalProcess := patternValue.asTuple()->get("arrivalProcess");
			};
		} else {
			assert fatal (false) with log ("Unknown ArrivalPattern: " + patternString);
		}
	};
	return null;
}

helper UML::Element::getGaStep_hostDemand() : NFP_Duration {
	if (self.getGaStep() = null) {
		return null;
	};
	var hostDemandStrings := self.getValue(self.getGaStep(), "hostDemand").oclAsType(Collection(String));
	assert warning (hostDemandStrings->size() = 1)
		with log ("Unexpected number of 'hostDemand' tagged values found, expected 1. "+
					"Only the first 'mean' value will be used (if found). " + 
					"The context element is '" + self.toString() + "'"); 
	return hostDemandStrings.toNfpDuration()->
			select(demand | demand.statQ.oclIsUndefined() or demand.statQ = 'mean')->
			asSequence()->first();
}

helper UML::Element::getGaStep_prob() : NFP_Real {
	if (self.getGaStep() = null) {
		return null;
	};
	var prob := self.getValue(self.getGaStep(), "prob").oclAsType(String);
	return prob.toNfpReal();
}

helper UML::Element::getPaLogicalResource_poolSize() : NFP_Integer {
	if (self.getPaLogicalResource() = null) {
		return null;
	};
	var prob := self.getValue(self.getPaLogicalResource(), "poolSize").oclAsType(String);
	return prob.toNfpInteger();
}

