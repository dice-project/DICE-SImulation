import es.unizar.disco.pnml.utils.PnmlDiceUtils;

import helpers;

modeltype UML uses 'http://www.eclipse.org/uml2/5.0.0/UML';
modeltype PNML uses 'http:///ptnet.ecore';
modeltype TYPES uses 'http://es.unizar.disco/simulation/datatypes/1.0';
modeltype TRACE uses 'http://es.unizar.disco/simulation/traces/1.0';
modeltype CONST uses 'http://es.unizar.disco/pnconstants/1.0';
modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype DBET uses 'http://es.unizar.disco.dice/libraries/Basic_Enumeration_Types/1.0';	

transformation ad2pnml(in ad : UML, in vars : TYPES, out res : PNML, out traces : TRACE); 

/**
	Main method:
		1.- Create the root elements (PetriNetDoc, PetriNet, Page)
		2.- Transform ActivityNodes, creating subnets of places and transitions
		2.- Transform ControlFlows, linking the previously created subnets
		2.- Complete transformation with the information of the workload in the initial nodes
*/
main() {
	// Transform top-level elements
	ad.scenario().map model2doc();
	
	// Transform net contents
	ad.scenario().node[UML::ActivityNode] -> map activityNode2subNet();
	ad.scenario().edge[UML::ControlFlow] -> map controlFlow2arc();
	
	// Transform deployment
    ad->objectsOfType(ActivityPartition)->flatten()[ActivityPartition] -> map partitions2resources();
		
	// Set time metadata
	if (resolveoneIn(UML::NamedElement::model2net, PNML::PetriNet).toolspecifics->notEmpty()) {
		log("Base time unit is 's'");
		log("Base frequency unit is 'Hz'");
	} else {
		log("Base time unit is 'tick'");
		log("Base frequency unit is 'events per tick'");
	}

}

/**
	Create the PetriNetDoc and the PetriNet
*/
mapping UML::NamedElement::model2doc() : PNML::PetriNetDoc {
	nets := self.map model2net();
}

mapping UML::NamedElement::model2net() : PNML::PetriNet {
	id := createRandomUniqueId();
	name := object PNML::Name {
		text := self.name;
	};
	pages := self.map model2page();
}

/**
	Create the page
*/
mapping UML::NamedElement::model2page() : PNML::Page {
	id := createRandomUniqueId();
}

/**
	Sets the metadata for the base time unit on the PNML file
*/
mapping baseTimeUnit(unit : String) {
	var net := resolveoneIn(UML::NamedElement::model2net, PNML::PetriNet);
	net.toolspecifics += baseTimeUnitToolInfo(unit);
}

mapping UML::ActivityPartition::partitions2resources() 
when {
	self.represents.getGaExecHost().oclIsUndefined().not();
}{

	var containedNodes := ad.objectsOfKind(UML::ActivityNode)->select(node : ActivityNode | self->intersection(node.inPartition)->notEmpty());
	assert fatal (containedNodes->size() >= 1 ) with log ("At least a node must be present in partition '" + self.toString() + "'");

	// For each partition, we need to modify the subnet that was previously 
	// generated. We add an intermediate place and a set of arcs connecting
	// to the immediate/timed transitions of the subnet. For instance,
	// [T]-->[P']-->[T']-->[P]
	// is transformed into:
	// [T]-->[P']-->[T']-->[P]
	//  ^            ^
	//  |            |
	//  v            v
	// [Resources-Place]
	
	var poolSize := self.represents.getGaExecHost_resMult();
								
	var place := self.map namedElement2place();
	place.initialMarking := object PNML::PTMarking {
			text := poolSize.value();
	};	
	
	// The direction of the arcs connecting the new place and the transitions
	// of the subnet depends on:
	// 1) The type of transition (timed or immediate).
	// 2) The Activity Node (Spout or Bolt) responsible for generating the transition.
	// 
	// In sum:
	// The arcs go from the timed transition (Spouts/Bolts) to the place 
	// The arcs go from the place to the immediate transitions (Bolts) 
	// The arcs go from the place to the timed transition (Spouts)
	
	containedNodes->forEach(node) {	
		assert warning (node.getStormBolt().oclIsUndefined().not() or
		                node.getStormSpout().oclIsUndefined().not()) with log ("Processing a node '" + node.toString() + "' in partition '" + self.toString() + "'");
		if (node.getStormBolt().oclIsUndefined().not()){
            // Timed transition 
			var temp_trans := node.resolveoneIn(UML::ActivityNode::activityNode2timedTransition);
			assert fatal (temp_trans.oclIsUndefined().not()) with log ("Could not find a temporal transition in the node '" + node.toString() + "' in partition '" + self.toString() + "'");
			
			var arc_1 := map arc(temp_trans, place);
			
			// Immediate transitions: start in the timed transition and go back the PN model until arriving the immediate transitions  
			assert fatal (temp_trans.InArcs->size() = 1) with log ("The temporal transition must have only one input arc. The number of incomming arcs is " + temp_trans.InArcs->size().toString() + " in partition '" + self.toString() + "'");
			
			var in_arc := temp_trans.InArcs->asSequence()->first();
			var intermediatePlace := in_arc.source;
			
			var imm_trans := intermediatePlace.InArcs->asSequence();
			assert fatal (imm_trans->size() >= 1 ) with log ("Could not find an immediate transition in the node '" + node.toString() + "' in partition '" + self.toString() + "'");
            imm_trans->forEach(i_trans){
            	var arc_2 := map arc(place, i_trans.source);
            };

		} else if  (node.getStormSpout().oclIsUndefined().not()) {
			var temp_trans := node.resolveoneIn(UML::ActivityNode::activityNode2timedTransition);
			assert fatal (temp_trans.oclIsUndefined().not()) with log ("Could not find a temporal transition in the node '" + node.toString() + "' in partition '" + self.toString() + "'");

			var arc_1 := map arc(temp_trans, place);
			var arc_2 := map arc(place, temp_trans);			
		}
	};
	
	// Add tracing information
	self.represents.map trace(place, "partitions2resources");
}

mapping UML::ActivityNode::activityNode2subNet() disjuncts 
UML::ActivityNode::spoutNode2subNet,
UML::ActivityNode::boltNode2subNet {};

/**
	Transform a generic ActivityNodel into the subnets:
	spout: [place]->[transition]
	bolt: [transition]->[place]->[transition]->
		              <\[place]</
*/
mapping UML::ActivityNode::spoutNode2subNet()
	when { (self.getStormSpout().oclIsUndefined().not()) }{
		var transition := self.map activityNode2timedTransition();
		var place := self.map activityNode2place();
				
		place.initialMarking := object PNML::PTMarking {
			text := self.getStorm_parallelism().value();
		};
				
		var arc_1 := map arc(transition, place);
		var arc_2 := map arc(place, transition);
		// Add tracing information
		self.map trace(place, "basicActivityNode2place");
		self.map trace(transition, "basicActivityNode2transition");
}

mapping UML::ActivityNode::boltNode2subNet()
	when { (self.getStormBolt().oclIsUndefined().not())} {
		var place_1 := self.map activityNode2place();
		
		// Create the intermediate node and transition
		var place_2 := self.map activityNode2placeParallelism();
		place_2.initialMarking := object PNML::PTMarking {
			text := self.getStorm_parallelism().value();
		};
		
		var transition := self.map activityNode2timedTransition();
				
		var arc_1 := map arc(place_1, transition);
		var arc_2 := map arc(transition, place_2);
		
		// Add tracing information
		self.map trace(place_1, "basicActivityNode2place");
		self.map trace(place_2, "basicActivityNode2placeParallelism");
		self.map trace(transition, "basicActivityNode2timedTransition");
}

/**
	Transform a generic NamedElement into a Place 
*/
mapping UML::NamedElement::namedElement2place() : PNML::Place {
		containerPage := resolveoneIn(UML::NamedElement::model2page);
		id := createRandomUniqueId();
		if (self.name.oclIsUndefined().not()) {
			name := object PNML::Name {
				text := self.name;
			};
		};
}

/*************************************************/

/**
	Transform a generic ActivityNode into a Place 
*/
mapping UML::ActivityNode::activityNode2place() : PNML::Place 
inherits UML::NamedElement::namedElement2place {
}

/**
	Transform a generic ActivityNode into a Place controlling the parallelism of the Bolt 
*/
mapping UML::ActivityNode::activityNode2placeParallelism() : PNML::Place 
inherits UML::NamedElement::namedElement2place {
			name.text := name.text + "_parallelism";
}

/**
	Transform a generic NamedElement into a Transition 
*/
mapping UML::NamedElement::namedElement2transition() : PNML::Transition {
		containerPage := resolveoneIn(UML::NamedElement::model2page);
		id := createRandomUniqueId();
		if (self.name.oclIsUndefined().not()) {
			name := object PNML::Name {
				text := self.name;
			};
		};
}

/**
	Transform a generic ActivityNode into a Transition and 
	creates any additional ToolInfo depending on the ActivityNode
	subtype (e.g., OpaqueActions with hostDemand may create 
	exponential transitions) 
*/
mapping UML::ActivityNode::activityNode2timedTransition() : PNML::Transition 
inherits UML::NamedElement::namedElement2transition {
	toolspecifics += self[OpaqueAction].map opaqueActionHostDemand2toolInfo();
}

/**
	Transform a generic NamedElement into a Transition 
*/
//mapping UML::ActivityNode::activityNode2immediateTransition() : PNML::Transition
mapping UML::NamedElement::activityNode2immediateTransition() : PNML::Transition
inherits UML::NamedElement::namedElement2transition {
		//name.text := self.name + "_transition";
		name.text := self.name.addSuffixNumber();
}


/**
	Transform a generic NamedElement into a Transition 
*/

/*mapping UML::NamedElement::namedElement2immediateTransition() : PNML::Transition
inherits UML::NamedElement::namedElement2transition {
		//name.text := self.name + "_transition";
		name.text := self.name.addSuffixNumber();
}*/

/**
	Transform a generic ActivityNode into a Transition 
*/

/*mapping UML::ActivityNode::activityNode2immediateTransition() : PNML::Transition
inherits UML::NamedElement::namedElement2immediateTransition {
}*/

/***********************************************************************/

/**
	Transforms an OpaqueAction with a hostDemand annotation to a ToolInfo element
*/

mapping UML::OpaqueAction::opaqueActionHostDemand2toolInfo() : List ( PNML::ToolInfo ) 
when {
		self.getStorm_hostDemand().oclIsUndefined().not();
}{
	var hostDemand := self.getStorm_hostDemand();
	result += expTransitionToolInfo( 1 / hostDemand.value());
	result += infServerTransitionToolInfo();
}

/**
	Creates an Arc from 'src' to 'tgt'
*/
mapping arc(in src : PNML::Node, in tgt : PNML::Node) : PNML::Arc {
	containerPage := resolveoneIn(UML::NamedElement::model2page);
	id := createRandomUniqueId();
	source := src;
	target := tgt;
}

/***********************************************************************/
/**
	Transform a generic ControlFlow into a Transition 
*/
mapping UML::ControlFlow::controlFlow2immediateTransition() : PNML::Transition {
		containerPage := resolveoneIn(UML::NamedElement::model2page);
		id := createRandomUniqueId();
		name := object PNML::Name {
				text := self.name + "_transition";
		};
}

mapping UML::ControlFlow::controlFlow2place(name_in: String) : PNML::Place {
		containerPage := resolveoneIn(UML::NamedElement::model2page);
		id := createRandomUniqueId();
		if (self.name.oclIsUndefined().not()) {
			name := object PNML::Name {
				text := name_in + "_Output";
			};
		};
}
/***********************************************************************/


/**
	Transforms a ControlFlow between two ActivityNodes to different subnets,
	being the most simple an arc between the subnets corresponding to the
	ActivityNodes contected by the ControlFlow 
*/
mapping UML::ControlFlow::controlFlow2arc() disjuncts 
UML::ControlFlow::finalControlFlow2arc,
UML::ControlFlow::mergeControlFlow2arc,
UML::ControlFlow::joinControlFlow2arc,
UML::ControlFlow::basicControlFlow2arc {};

/**
	Transforms a ControlFlow between a generic ActivityNode and an ActivityFinalNode.
	The ControlFlow is transformed into an immediate transition connecting to the
	place representing the output buffer of the previous bolt
*/

mapping UML::ControlFlow::finalControlFlow2arc() when {
	self.target.oclIsKindOf(ActivityFinalNode)
}{
	var source := self.source;
	var target := self.target;
	assert fatal (source.oclIsKindOf(ActivityNode) and source.getStormBolt().oclIsUndefined().not()) 
	with log('Final node should be preceded by a StormBolt');
	
	/*var place_bolt := source.resolveoneIn(UML::ActivityNode::activityNode2place);*/
	var timed_trans := source.resolveoneIn(UML::ActivityNode::activityNode2timedTransition);
	
	/* Create a new place and immediate transition.
	TimedTransition -> Place -> ImmTransition */
	var place := self.map namedElement2place();
	//var final_trans := self.map namedElement2immediateTransition();
	var final_trans := self.map activityNode2immediateTransition();
	
	map arc(timed_trans, place);
	map arc(place, final_trans);
	
}

/**
	Transforms a ControlFlow between two generic ActivityNode and a MergeNode.
	The ControlFlow is transformed into a single place, and several immediate
	transitions for each incoming ControlFlow
*/

mapping UML::ControlFlow::mergeControlFlow2arc() when {
	self.getStormStreamStep().oclIsUndefined().not() and
	self.target.oclIsKindOf(MergeNode)
}{
	var source := self.source;
	var target := self.target;
	var t_1 := source.resolveoneIn(UML::ActivityNode::activityNode2timedTransition);
    var place := self.map namedElement2place();
	var arc_1 := map arc(t_1, place);
	assert fatal (target.outgoing.target->size() = 1) with log('Merges should only have a single outgoing ControlFlow');
						
	var bolt := target.outgoing.target->asOrderedSet()->first();
	
	/* Create a new immediate transition for each incoming StormStream to the MergeNode */
	// var trans_bolt := self.map namedElement2immediateTransition();
	 var trans_bolt := self.map activityNode2immediateTransition();

	var place_bolt := bolt.resolveoneIn(UML::ActivityNode::activityNode2place);
	var place_parall := bolt.resolveoneIn(UML::ActivityNode::activityNode2placeParallelism);
	map arc(trans_bolt, place_bolt);
	map arc(place_parall,trans_bolt);
	var arc_2 := map arc(place, trans_bolt);
	if (self.getStormStreamStep_grouping().=(DBET::StreamPolicy::all) ) {
		arc_1.inscription := object PNML::PTArcAnnotation {
			text := bolt.getStormBolt_parallelism().value();
		};
	};
	arc_2.inscription := object PNML::PTArcAnnotation {
		text := self.getStormStreamStep_numTuples().value();
	};
}

/**
	Transforms a ControlFlow between a generic ActivityNode and a Join.
	The Join has been previously transformed as a single transition, and now
	we need to create a Place for each incoming ControlFlow to enable the
	synchronization of the different execution flows
*/
mapping UML::ControlFlow::joinControlFlow2arc() when {
	self.getStormStreamStep().oclIsUndefined().not() and
	self.target.oclIsKindOf(JoinNode)
}{
	var source := self.source;
	var target := self.target;
	var t_1 := source.resolveoneIn(UML::ActivityNode::activityNode2timedTransition);
    var place := self.map namedElement2place();
	var arc_1 := map arc(t_1, place);
	assert fatal (target.outgoing.target->size() = 1) with log('Joins should only have a single outgoing ControlFlow');
		
	var bolt := target.outgoing.target->asOrderedSet()->first();
	//var trans_bolt := bolt.resolveoneIn(UML::NamedElement::namedElement2immediateTransition);			
	var trans_bolt := bolt.resolveoneIn(UML::NamedElement::activityNode2immediateTransition);
	if (trans_bolt.oclIsUndefined()){
		trans_bolt := bolt.map activityNode2immediateTransition();
		var place_bolt := bolt.resolveoneIn(UML::ActivityNode::activityNode2place);
		var place_parall := bolt.resolveoneIn(UML::ActivityNode::activityNode2placeParallelism);
		map arc(trans_bolt, place_bolt);
		map arc(place_parall,trans_bolt);
	};
	var arc_2 := map arc(place, trans_bolt);
	if (self.getStormStreamStep_grouping().=(DBET::StreamPolicy::all) ) {
		arc_1.inscription := object PNML::PTArcAnnotation {
			text := bolt.getStormBolt_parallelism().value();
		};
	};
	arc_2.inscription := object PNML::PTArcAnnotation {
		text := self.getStormStreamStep_numTuples().value();
	};
}

mapping UML::ControlFlow::basicControlFlow2arc() {

}

/*******************************************************************************
  Traceability mappings
*******************************************************************************/

mapping OclAny::trace(to : OclAny) : TRACE::Trace {
	init {
		result := object TRACE::Trace {
			fromDomainElement := self.eObject();
			toAnalyzableElement := to.eObject();
		}
	}
}

mapping OclAny::trace(to : OclAny, text : String) : TRACE::Trace {
	init {
		result := object TRACE::Trace {
			fromDomainElement := self.eObject();
			toAnalyzableElement := to.eObject();
			rule := text;
		}
	}
}

/*******************************************************************************
  Navigation helpers
  Helpers on domains are only valid in the context of a transformations and
  cannot be moved to a library
*******************************************************************************/

helper UML::scenario() : UML::Activity {
	// When running the transformation from the simulation tool, the UML domain must 
	// contain a single activity at its root 
	assert warning (self.rootObjects()[UML::Activity]->size() = 1) with log ("No single Activity instance was found at the root of the UML input model, trying to use the first Activity in the model instead");
	
	if (self.rootObjects()[UML::Activity]->isEmpty().not()) {
		return self.rootObjects()[UML::Activity]->asOrderedSet()->first();
	};
	// This execution path is useful when running the transformation at development time
	return self.objectsOfType(UML::Activity)->asOrderedSet()->first();
}

helper TYPES::vars() : Set ( PrimitiveVariableAssignment ) {
	return self.rootObjects()[PrimitiveVariableAssignment];
}

helper TYPES::PrimitiveVariableAssignment::asDict() : Dict(String, Real) {
	var vars : Dict (String, Real) := Dict {};
	self->forEach(assignment) {
		vars->put(assignment.variable, assignment.value.toString().toReal());
	};
	return vars;
}

helper TRACE::set() : TRACE::TraceSet {
	return self.rootObjects()[TRACE::TraceSet]->asSequence()->first();
}

/*******************************************************************************
  Intermediate classes
  Sadly, intermediate classes cannot be shared among libraries or 
  transformations.
*******************************************************************************/
   
intermediate class NFP_CommonType {
	_rawExpression : String;
	expr : String;
	source : String;
	statQ : String;
	dir : String;
	mode : String;
}

intermediate class NFP_Integer extends NFP_CommonType {
	value : Integer;
}

intermediate class NFP_Real extends NFP_CommonType{
	value : Real;
}

intermediate class NFP_Duration extends NFP_Real {
	unit : String;
	clock : String;
	precision : Real;
	worst : Real;
	best : Real;
}

intermediate class NFP_Frequency extends NFP_Real {
	unit : String;
	precision : Real;
}

/*******************************************************************************
  Tagged values utilities
*******************************************************************************/

/**
	Helper that parses a VSL tuple containing a NFP_CommonType
*/
helper String::toNfpCommonType() : NFP_CommonType {
	var res := object NFP_CommonType {
		_rawExpression := self;
		statQ := null;
		expr := null;
		source := null;
		dir := null;
		mode := null;
	};
	if (self.isTuple()) {
		var entries := self.asTuple();
		res.expr := entries->get("expr");
		res.statQ := entries->get("statQ");
		res.source := entries->get("source");
		res.dir := entries->get("dir");
		res.mode := entries->get("mode");
	} else {
		res.expr := self;
	};
	assert warning (res.statQ.oclIsUndefined() or res.statQ = 'mean') 
		with log ("Expression '" + self + "' defines an unknown 'statQ' value, expected empty or 'mean'");
	assert warning (res.source.oclIsUndefined() or res.source = 'est' or res.source = 'meas')
		with log ("Expression '" + self + "' defines an unsupported 'source' for an input parameter, expected 'est' or 'meas'.");
	assert warning (res.dir.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'dir' property");
	assert warning (res.mode.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'mode' property");
	return res;
}

/**
	Helper that parses a VSL tuple containing a NFP_Integer
*/
helper String::toNfpInteger() : NFP_Integer {
	var nfp := self.toNfpCommonType();
	var res := object NFP_Integer {
		_rawExpression := nfp._rawExpression;
		expr := nfp.expr;
		statQ := nfp.statQ;
		source := nfp.source;
		dir := nfp.dir;
		mode := nfp.mode;
		value := null;
	};
	if (self.isTuple()) {
		var entries := self.asTuple();
		res.value := entries->get("value").toInteger();
	};
	assert fatal (res.value.oclIsUndefined() xor res.expr.oclIsUndefined())
		with log ("Expression '" + self + "' must define either a valid 'value' or a valid 'expr'");
	return res;
}

/**
	Helper that parses a VSL tuple containing a NFP_Real
*/
helper String::toNfpReal() : NFP_Real {
	var nfp := self.toNfpCommonType();
	var res := object NFP_Real {
		_rawExpression := nfp._rawExpression;
		expr := nfp.expr;
		statQ := nfp.statQ;
		source := nfp.source;
		dir := nfp.dir;
		mode := nfp.mode;
		value := null;
	};
	if (self.isTuple()) {
		var entries := self.asTuple();
		res.value := entries->get("value").toReal();
	};
	assert fatal (res.value.oclIsUndefined() xor res.expr.oclIsUndefined())
		with log ("Expression '" + self + "' must define either a valid 'value' or a valid 'expr'");
	return res;
}


/**
	Helper that parses a VSL tuple containing a NFP_Duration
*/
helper String::toNfpDuration() : NFP_Duration {
	var nfp := self.toNfpReal();
	var res := object NFP_Duration {
		_rawExpression := nfp._rawExpression;
		value := nfp.value;
		expr := nfp.expr;
		statQ := nfp.statQ;
		source := nfp.source;
		dir := nfp.dir;
		mode := nfp.mode;
		unit := null;
		clock := null;
		precision := null;
		worst := null;
		best := null;
	};
	if (self.isTuple()) {
		var entries := self.asTuple();
		res.unit := entries->get("unit");
		res.clock := entries->get("clock");
		res.precision := entries->get("precision").toReal();
		res.worst := entries->get("worst").toReal();
		res.best := entries->get("best").toReal();
	};
	assert warning (res.unit.oclIsUndefined().not())
		with log ("Expression '" + self + "' does not define a 'unit', assumming the default base unit (see complete log)");
	assert warning (res.dir.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'clock' property");
	assert warning (res.dir.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'precision' property");
	assert warning (res.dir.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'worst' property");
	assert warning (res.dir.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'best' property");
	
	return res;
}

/**
	Helper that parses a VSL tuple containing a NFP_Frequency
*/
helper String::toNfpFrequency() : NFP_Frequency {
	var nfp := self.toNfpReal();
	var res := object NFP_Frequency {
		_rawExpression := nfp._rawExpression;
		value := nfp.value;
		expr := nfp.expr;
		statQ := nfp.statQ;
		source := nfp.source;
		dir := nfp.dir;
		mode := nfp.mode;
		unit := null;
		precision := null;
	};
	if (self.isTuple()) {
		var entries := self.asTuple();
		res.unit := entries->get("unit");
		res.precision := entries->get("precision").toReal();
	};
	assert warning (res.unit.oclIsUndefined().not())
		with log ("Expression '" + self + "' does not define a 'unit', assumming the default base unit (see complete log)");
	assert warning (res.dir.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'clock' property");
	assert warning (res.dir.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'precision' property");
	assert warning (res.dir.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'worst' property");
	assert warning (res.dir.oclIsUndefined())
		with log ("Expression '" + self + "' defines a value for the unsupported 'best' property");
	
	return res;
}

helper NFP_Integer::value() : Integer {
	if (self.value.oclIsUndefined().not()) {
		return self.value;
	};
	return self.expr.eval(vars.vars()).toInteger();
}

helper NFP_Real::value() : Real {
	if (self.value.oclIsUndefined().not()) {
		return self.value;
	};
	return self.expr.eval(vars.vars()).toReal();
}

helper NFP_Duration::value() : Real {
	var value : Real;	
	if (self.value.oclIsUndefined().not()) {
		value := self.value;
	};
	value := self.expr.eval(vars.vars()).toReal();
	if (self.unit.oclIsUndefined().not()) {
		map baseTimeUnit("s");			
		value := value.convert(self.unit, "s");
	};
	return value;
}

helper NFP_Frequency::value() : Real {
	var value : Real;	
	if (self.value.oclIsUndefined().not()) {
		value := self.value;
	};
	value := self.expr.eval(vars.vars()).toReal();
	if (self.unit.oclIsUndefined().not()) {
		map baseTimeUnit("s");
		value := value.convert(self.unit, "Hz");
	};
	return value;
}

/*******************************************************************************
  Getters for tagged values
******************************************************************************/

helper UML::Element::getStorm_hostDemand() : NFP_Duration {
	if (self.getStormBolt().oclIsUndefined().not()){
		return self.getStormBolt_hostDemand();	
	} else if (self.getStormSpout().oclIsUndefined().not()){ 
		return self.getStormSpout_hostDemand();
	} else {
		return null;
	}
}

helper UML::Element::getStormBolt_hostDemand() : NFP_Duration {
	if (self.getStormBolt() = null) {
		return null;
	};
	var hostDemandStrings := self.getValue(self.getStormBolt(), "hostDemand").oclAsType(Collection(String));
	assert warning (hostDemandStrings->size() = 1)
		with log ("Unexpected number of 'hostDemand' tagged values found, expected 1. "+
					"Only the first 'mean' value will be used (if found). " + 
					"The context element is '" + self.toString() + "'"); 
	return hostDemandStrings.toNfpDuration()->
			select(demand | demand.statQ.oclIsUndefined() or demand.statQ = 'mean')->
			asSequence()->first();
}

helper UML::Element::getStormSpout_hostDemand() : NFP_Duration {
	if (self.getStormSpout() = null) {
		return null;
	};
	var hostDemandStrings := self.getValue(self.getStormSpout(), "hostDemand").oclAsType(Collection(String));
	assert warning (hostDemandStrings->size() = 1)
		with log ("Unexpected number of 'hostDemand' tagged values found, expected 1. "+
					"Only the first 'mean' value will be used (if found). " + 
					"The context element is '" + self.toString() + "'"); 
	return hostDemandStrings.toNfpDuration()->
			select(demand | demand.statQ.oclIsUndefined() or demand.statQ = 'mean')->
			asSequence()->first();
}

/******************************************************************/
helper UML::Element::getStorm_parallelism() : NFP_Integer {
	if (self.getStormBolt().oclIsUndefined().not()){
		return self.getStormBolt_parallelism();	
	} else if (self.getStormSpout().oclIsUndefined().not()){ 
		return self.getStormSpout_parallelism();
	} else {
		return null;
	}
}

helper UML::Element::getStormBolt_parallelism() : NFP_Integer {
	if (self.getStormBolt() = null) {
		return null;
	};
	var parallelism := self.getValue(self.getStormBolt(), "parallelism").oclAsType(String);
	assert warning (parallelism->size() = 1)
		with log ("Unexpected number of 'parallelism' tagged values found, expected 1. "+
		 			"parallelism='"+ parallelism.toString() +"' "+
					"The context element is '" + self.toString() + "'"); 
					
	return parallelism.toNfpInteger();
}

helper UML::Element::getStormSpout_parallelism() : NFP_Integer {
	if (self.getStormSpout() = null) {
		return null;
	};
	var parallelism := self.getValue(self.getStormSpout(), "parallelism").oclAsType(String);
	assert warning (parallelism->size() = 1)
		with log ("Unexpected number of 'parallelism' tagged values found, expected 1. "+
					"The context element is '" + self.toString() + "'"); 
					
	return parallelism.toNfpInteger();
}
/******************************************************************/

helper UML::Element::getStormStreamStep_numTuples() : NFP_Integer {
	if (self.getStormStreamStep() = null) {
		return null;
	};
	var numTuples := self.getValue(self.getStormStreamStep(), "numTuples").oclAsType(String);
	assert warning (numTuples->size() = 1)
		with log ("Unexpected number of 'numTuples' tagged values found, expected 1. "+
					"The context element is '" + self.toString() + "'"); 
					
	return numTuples.toNfpInteger();
}

helper UML::Element::getStormStreamStep_grouping() : DBET::StreamPolicy {
	if (self.getStormStreamStep() = null) {
		return null;
	};
	//var grouping := (DBET::StreamPolicy) self.getValue(self.getStormStreamStep(), "grouping").oclAsType(StreamPolicy);
	var grouping := self.getValue(self.getStormStreamStep(), "grouping").oclAsType(DBET::StreamPolicy);
	assert warning (grouping->size() = 1)
		with log ("Unexpected number of 'numTuples' tagged values found, expected 1. "+
					"The context element is '" + self.toString() + "'");
					
	return grouping;
}

helper UML::Element::getGaExecHost_resMult() : NFP_Integer {
	if (self.getGaExecHost() = null) {
		return null;
	};
	var prob := self.getValue(self.getGaExecHost(), "resMult").oclAsType(String);
	return prob.toNfpInteger();
}
